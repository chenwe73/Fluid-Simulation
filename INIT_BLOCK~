.include "nios_macros.s"
.include "constants.s"


.section .text 
.global INIT_BLOCK

INIT_BLOCK:
	subi sp, sp, 4
	stw ra, 0(sp)

	movi r8, 0 #register to store current row of array
	movi r9, 0 #register to store current col of array
	movia r10, BLOCK #counter to store current address of array element
	movi r11, ROWS-1 #last row of array
	movi r12, COLS-1 #last col of array

	LOOP:
	bgt r8, r11, DONE # exit condition, if past last row
	# see if we can access array elements above, below, to the left and to the right
	beq r8, r0, EDGE
	beq r8, r11, EDGE
	beq r9, r0, EDGE
	beq r9, r12, EDGE

	br DONE_CHECKING
	EDGE:
		movi r2, 1
		stw r2, 0(r10)
	

	DONE_CHECKING:
		addi r10, r10, ELEMENTSIZE # incrementing array pointer
		addi r9, r9, 1

	bgt r9, r12, UPDATE_ROW_AND_COL # if col goes out of bounds while incrementing, increase row and reset col
	br DONE_UPDATING:

	UPDATE_ROW_AND_COL:
		addi r8, r8, 1
		movi r9, 0

	DONE_UPDATING:
	br LOOP

DONE:
	ldw ra, 0(sp)
	addi sp, sp, 4
ret





